<!-- order-list 我的订单 -->
<template>
  <view class='order-list-container h4'>
    <view class="nav">
      <repeat for="{{navList}}" key="index" index="index" item="item">
        <view @tap.stop="changeNav({{item.value}})" class="item {{item.value === selectIndex ? 'active':''}}"><text>{{item.label}}</text></view>
      </repeat>
    </view>
    <view class="order-row" wx:if="{{showList.length>0}}" >
      <repeat for="{{showList}}" key="index" index="index" item="item">
        <orderitem :order.sync="item"></orderitem>
      </repeat>
    </view>
    <view wx:else class="no-order">
      <i wx:if="{{selectIndex===-1}}" class="iconfont icon-wodedingdan"></i>
      <i wx:if="{{selectIndex===1}}" class="iconfont icon-dingdandaifukuan"></i>
      <i wx:if="{{selectIndex===2}}" class= "iconfont icon-daifahuo"></i>
      <i wx:if="{{selectIndex===3}}" class="iconfont icon-qianshou"></i>
      <i wx:if="{{selectIndex===4}}" class="iconfont icon-tuihuanhuo"></i>
      <view class="no-text">
        您还没有<text wx:if="{{selectIndex===1}}">待付款</text>
        <text wx:if="{{selectIndex===2}}">待发货</text>
        <text wx:if="{{selectIndex===3}}">待收货</text>
        <text wx:if="{{selectIndex===4}}">退换货</text>订单
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import api from '@/api/api';
  import tip from '@/utils/tip';
  import OrderItem from '@/components/order-item';
  export default class OrderList extends wepy.page {
    config = {
      navigationBarTitleText: "我的订单",
    };

    data = {
      selectIndex:-1,
      navList:[
        {
          label:'全部订单',
          value:-1
        },
        {
          label:'待付款',
          value:1
        },
        {
          label:'待发货',
          value:2
        },
        {
          label:'待收货',
          value:3
        },
        {
          label: '退换货',
          value: 4
        }
      ],
      orderList:[],
      showList:[]
    };

    components = {
      orderitem: OrderItem
    };

    methods = {
      changeNav(e){
        this.selectIndex= e;
      },
    };

    events = {
      'refresh-list':(...args)=>{
        this.getOrderList(this.selectIndex);
      }
    };

    watch = {
      selectIndex(n,o){
        let orderList = this.orderList;
        // let status = n;
        let showList = this.filerData(n,orderList);
        this.showList = showList;
        this.$apply();
      }
    };

    computed = {};

    async onLoad(e) {
      this.selectIndex = e.type ? Number(e.type): -1;
      this.$apply();
      await this.getOrderList(e.type);
    };

    onShow() { };
    async getOrderList(type=-1){
      let res = await api.getOrderList({
        query: {
          method:'LoadData',
        },
        realUrl: true
      })
      // let res = await api.getOrderList({
      //   query:{
      //     type:type
      //   }
      // })
      if(res.code===0){
        // res.data.forEach(obj=>{
        //   if(obj.detail && obj.detail.length>0){
        //   console.log(obj)
        //     obj.detail.forEach(p=>{
        //       p.count=p.count?Number(p.count):0
        //       p.price=p.price?Number(p.price).toFixed(2):0
        //     })
        //   }
        // })
        // console.log('da',res.data)
        this.orderList = res.data;
        let showList = this.filerData(type,res.data);
        this.showList = showList;
      }
      this.$apply();
      console.log(this.orderList)
    };
    filerData(type,orderList){
      let showList = []
      if(Number(type) === -1){
        showList= orderList;
      }else{
        showList = orderList.filter(obj=>{
          if (Number(obj.status)>=4 && Number(obj.status)<=7){
            return Number(obj.status)>=4 && Number(obj.status)<=7
          }
          return Number(obj.status) === Number(type)
        })
      }
      return showList
    }
  }
</script>

<style lang='less'>
  @import "../styles/color";
  .order-list-container{
    position: relative;
  .nav{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 40rpx;
    background-color: @bg-white;
    border-bottom: 1px solid @bg-gray; 
    .item{
      padding: 26rpx 0;
      border-bottom: 4rpx solid transparent;
      &.active{
        color: @color-major;
        border-color: @color-major;
      }
    }
  }
  .no-order{
    padding-top: 350rpx;
    text-align: center;
    color: @bg-d;
    i{
      font-size: 120rpx;
    }
    .no-text{
      margin-top: 100rpx;
    }
  }
  }
</style>