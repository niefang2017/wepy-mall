<style lang='less'>
  @import'./styles/style';
  .container {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
  }
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import api from './api/api'
  import tip from './utils/tip'
  import {
    setStore,
    getStore
  } from 'wepy-redux'
  import configStore from './store'
  import {
    UPDATE_USER_INFO,
    UPDATE_AUTHOR_INFO,
    UPDATE_CODE,
    UPDATE_SYSTEMINFO,
    UPDATE_LOGININFO
  } from './store/types/user'
  const store = configStore()
  setStore(store)
  let failNum=0;
  export default class extends wepy.app {
    config = {
      pages: [
        'pages/index',
        'pages/shop-cart',
        'pages/classify',
        'pages/my',
        'pages/authorization-page',
        'pages/course-detail',
        'pages/search',
        'pages/my-coupon',
        'pages/order-pay',
        'pages/order-list',
        'pages/order-info',
        'pages/bank-card',
        'pages/qrcode',
        'pages/mine-info',
        'pages/course-list',
        'pages/calendar',
        'pages/mine-list',
        'pages/pay-result',
        'pages/express',
        'pages/rate',
        'pages/rate-list',
        'pages/web-view'
      ],
      "permission": {
        "scope.userLocation": {
          "desc": "你的位置信息将用于快速获取位置展示"
        }
      },
      window: {
        navigationBarTitleText: "五星体育运动商城",
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#fff',
        navigationBarTitleText: 'WeChat',
        navigationBarTextStyle: 'black'
      },
      "navigateToMiniProgramAppIdList": ["wx38557d1eb9f54bec","wx64520bbf28ce91ff"],
      tabBar: {
        'color': '#999999',
        'selectedColor': '#ff6a3c',
        'backgroundColor': '#ffffff',
        'borderStyle': 'black',
        'list': [{
          'pagePath': 'pages/index',
          'text': '首页',
          'iconPath': 'static/images/icon_home.png',
          'selectedIconPath': 'static/images/icon_home_active.png'
        }, {
          'pagePath': 'pages/classify',
          'text': '商城',
          'iconPath': 'static/images/icon_classify.png',
          'selectedIconPath': 'static/images/icon_classify_active.png'
        }, {
          'pagePath': 'pages/shop-cart',
          'text': '购物车',
          'iconPath': 'static/images/icon_shop_cart.png',
          'selectedIconPath': 'static/images/icon_shop_cart_active.png'
        }, {
          'pagePath': 'pages/my',
          'text': '我',
          'iconPath': 'static/images/icon_info.png',
          'selectedIconPath': 'static/images/icon_info_active.png'
        }]
      }
    }
    globalData = {
      userInfo: null,
      loginInfo: {
        token: '',
        ticket: '',
        bindStatus: ''
      },
      systemInfo: null,
      unionid:''
    }
    constructor() {
      super()
      this.use('requestfix')
      this.use('promisify')
    }
    onLaunch() {
      this.$interceptors = {
        request: {
          config(p) {
            p.header = {
              unionid: this.globalData.unionid?this.globalData.unionid:wepy.getStorageSync('unionid')
            };
            // if(this.globalData.unionid && this.globalData.unionid != ''){
            //   p.header = {
            //     unionid: this.globalData.unionid?this.globalData.unionid:wepy.getStorageSync('unionid')
            //   };
            // }
            return p;
          },
          success(res) {
            return res;
          }
        }
      };
      // this.getUserInfo();
      this.getSystemInfo();
    }
    async authLogin(userInfo) {
      let res = await wepy.login();
      if (res.code) {
        store.dispatch({
          type: UPDATE_CODE,
          code: res.code
        });
        console.log('==userInfo',userInfo)
        console.log('res===', res,store.getState());
        this.loginRequest(res.code,userInfo);
      } else {
        wepy.showToast({
          title: `登录失败! ${res.errMsg}`, //提示的内容,
          icon: 'none', //图标,
          duration: 2000, //延迟时间,
          mask: true
        });
      }
    }
    async getUserInfo(cb) {
      const that = this
      if (this.globalData.userInfo) {
        return this.globalData.userInfo
      }
      let res = await wepy.getSetting()
      // console.log('get', res,getStore().getState())
      if ((res.authSetting)['scope.userInfo']) {
        let userInfo = this.globalData.userInfo
        if (!userInfo || !userInfo.nickName) {
          let data = await wepy.getUserInfo()
          console.log('getUserInfo=', data)
          if (data) {
            this.globalData.userInfo = data.userInfo
            // let authorData = {
            //   author: data.userInfo
            // }
            if (getApp().userInfoCallback) {
              getApp().userInfoCallback(data.userInfo);
            }
            // cb && cb(data.userInfo)
            console.log('进来',data.userInfo)
            this.authLogin(data);
            store.dispatch({
              type: 'UPDATE_AUTHOR_INFO',
              author: data.userInfo
            });
            // console.log('get==',store.getState(),getStore().getState())
          }
        }
      }else{
        wepy.navigateTo({ url: '/pages/authorization-page' });
        
      }
    }
    async getSystemInfo() {
      let systemInfo = await wepy.getSystemInfo();
      this.globalData.systemInfo = systemInfo;
      store.dispatch({
        type: UPDATE_SYSTEMINFO,
        systemInfo
      });
    }
    async loginRequest(code,userInfo){
      let res = await api.login({
        query: {
          method:'code2Session',
          code: code,
          encryptedData:userInfo.encryptedData,
          iv: userInfo.iv,
          signature: userInfo.signature
        },
        method: 'POST',
        realUrl: true
      })
      if (res && res.code===0) {
        let data = res.data
        console.log('登录data====', data)
        // this.globalData.loginInfo= data
        this.globalData.unionid = data[0].unionId
        wepy.setStorageSync('unionid',data[0].unionId);
        
        //这里调用回调函数
        if (getApp().loginCallback) {
          getApp().loginCallback(this.globalData.unionid);
        } 
        store.dispatch({
          type: UPDATE_USER_INFO,
          userInfo: userInfo
        });
        // store.dispatch({
        //   type: UPDATE_LOGININFO,
        //   loginInfo: data
        // });
      } else {
        failNum++;
        // 登录失败再登录1次
        if(failNum===1){
          return this.loginRequest();
        }
        tip.toast({
          title: loginRes.msg || '登录失败',
          icon: 'none'
        })
      }
    }
  }
</script>
